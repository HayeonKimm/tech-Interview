mvc패턴이란 
model, view, controller 의 약자로 
모델(Model)
DATA, 정보들의 가공을 책임지는 컴포넌트를 말합니다.
뷰(View)
사용자에게 보여지는 부분, 즉 유저 인터페이스(User interface)를 의미합니다.
컨트롤러(Controller)
모델(Model)과 뷰(View) 사이를 이어주는 브릿지(Bridge) 역할을 의미합니다.
MVC 패턴에 대한 여러 글을 읽어봤지만, 결국 '유지보수의 편리성'이라는 하나의 결론으로 수렴합니다. 
최초 설계를 꼼꼼하게 진행한 시스템이라도 유지보수가 발생하기 시작하면 각 기능간의 결합도(coupling)가 높아지는 경우가 발생합니다.
이는 최초 설계 이념을 정했던 사람들의 부재 혹은 비즈니스 요건 변경으로 인해 필연적으로 발생하는 것 같습니다.
결합도가 높아진 시스템은 유지보수 작업 시 다른 비즈니스 로직에 영향을 미치게 되므로 사소한 코드의 변경이 의도치 않은 버그를 유발할 수 있습니다.

MVC 패턴의 한계Permalink
세상에 완벽이라는 단어는 없습니다. MVC 패턴에도 한계가 존재합니다. 
복잡한 대규모 프로그램의 경우 다수의 뷰와 모델이 컨트롤러를 통해 연결되기 때문에 컨트롤러가 불필요하게 커지는 현상이 발생합니다. 
복잡한 화면을 구성하는 경우에도 동일한 현상이 발생하는데 이를 'Massive-View-Controller' 라고 합니다.
